import type * as TSESTree from './generated/ast-spec';
declare module './generated/ast-spec' {
    interface BaseNode {
        parent: TSESTree.Node;
    }
    interface Program {
        /**
         * @remarks This never-used property exists only as a convenience for code that tries to access node parents repeatedly.
         */
        parent?: never;
    }
    interface AccessorPropertyComputedName {
        parent: TSESTree.ClassBody;
    }
    interface AccessorPropertyNonComputedName {
        parent: TSESTree.ClassBody;
    }
    interface TSAbstractAccessorPropertyComputedName {
        parent: TSESTree.ClassBody;
    }
    interface TSAbstractAccessorPropertyNonComputedName {
        parent: TSESTree.ClassBody;
    }
    interface VariableDeclaratorDefiniteAssignment {
        parent: TSESTree.VariableDeclaration;
    }
    interface VariableDeclaratorMaybeInit {
        parent: TSESTree.VariableDeclaration;
    }
    interface VariableDeclaratorNoInit {
        parent: TSESTree.VariableDeclaration;
    }
    interface UsingInForOfDeclarator {
        parent: TSESTree.VariableDeclaration;
    }
    interface UsingInNormalContextDeclarator {
        parent: TSESTree.VariableDeclaration;
    }
    interface CatchClause {
        parent: TSESTree.TryStatement;
    }
    interface ClassBody {
        parent: TSESTree.ClassDeclaration | TSESTree.ClassExpression;
    }
    interface ImportAttribute {
        parent: TSESTree.ExportAllDeclaration | TSESTree.ExportNamedDeclaration | TSESTree.ImportDeclaration | TSESTree.TSImportType;
    }
    interface ImportDefaultSpecifier {
        parent: TSESTree.ImportDeclaration;
    }
    interface ImportNamespaceSpecifier {
        parent: TSESTree.ImportDeclaration;
    }
    interface ImportSpecifier {
        parent: TSESTree.ExportAllDeclaration | TSESTree.ExportNamedDeclaration | TSESTree.ImportDeclaration;
    }
    interface ExportDefaultDeclaration {
        parent: TSESTree.BlockStatement | TSESTree.Program | TSESTree.TSModuleBlock;
    }
    interface Expor